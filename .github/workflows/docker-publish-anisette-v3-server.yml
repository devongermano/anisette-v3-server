name: Publish anisette-v3-server Docker image

on:
  push:
    branches: [main]          # every commit to main
  release:                    # when you click “Publish release” (v1.2.0, etc.)
    types: [published]
  workflow_dispatch:          # manual run button

jobs:
  docker:
    runs-on: ubuntu-latest

    # Built-in GITHUB_TOKEN gets “contents:read, packages:write” by default.
    # Explicit block keeps it obvious and future-proof.
    permissions:
      contents: read
      packages: write

    steps:
      # 1  Check out the repo
      - uses: actions/checkout@v4

      # 2  Enable cross-arch emulation (needed for arm builds on x86 runner)
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      # 3  Enable Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # 4  Derive tags + OCI labels automatically
      - name: Extract metadata (tags & labels)
        id: meta
        uses: docker/metadata-action@v5
        with:
          # ghcr.io/<owner>/<repo>, e.g. ghcr.io/dadoum/anisette-v3-server
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=raw,value=latest          # :latest
            type=sha,format=short          # :8c97d1f
            type=semver,pattern={{version}}# :1.2.3 on releases
          labels: |
            org.opencontainers.image.source=${{ github.repositoryUrl }}
            org.opencontainers.image.revision=${{ github.sha }}

      # 5  Authenticate to GHCR (no PAT needed for same-repo push)
      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}          # repository owner
          password: ${{ secrets.GITHUB_TOKEN }}  # provided automatically

      # 6  Build & push the image
      - name: Build and push image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile                # adjust if your Dockerfile lives elsewhere
          push: true
          # Keep whatever architectures you actually need
          platforms: linux/386,linux/amd64,linux/arm/v7,linux/arm64/v8
          tags:   ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          # Layer-cache speed-up (uncomment if desired)
          # cache-from: type=gha
          # cache-to:   type=gha,mode=max